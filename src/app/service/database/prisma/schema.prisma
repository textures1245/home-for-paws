generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Auth {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid()) @db.Uuid()
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    // Define relationships
    User      User?
}

model User {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid()) @db.Uuid()
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    userRole  Role

    // Define relationships
    auth               Auth       @relation(fields: [authUuid], references: [uuid])
    authUuid           String     @unique @db.Uuid()
    userPreferences    Preference @relation(fields: [userPreferenceUuid], references: [uuid])
    userPreferenceUuid String     @db.Uuid()
    Payment            Payment[]
    Message            Message[]
    ChatRoom           ChatRoom[]

    OwnerReview      Review[]   @relation("OwnerRelation")
    ReviewPreference Review[]   @relation("ToUserRelation")
    Pet              Pet[]
    ToOfferingUser   Proposal[] @relation("toOfferingUser")
    ProposalOwner    Proposal[] @relation("proposalOwner")
}

model Payment {
    id          Int      @id @default(autoincrement())
    uuid        String   @unique @default(uuid()) @db.Uuid()
    amount      Float
    description String
    status      String
    date        DateTime
    type        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    // Define relationships
    user     User   @relation(fields: [userUuid], references: [uuid])
    userUuid String @db.Uuid()
}

model Review {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique @default(uuid()) @db.Uuid()
    reviewDetail String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt
    rating       Float

    // Define relationships
    owner      User   @relation(name: "OwnerRelation", fields: [ownerUuid], references: [uuid])
    toUser     User   @relation(name: "ToUserRelation", fields: [toUserUuid], references: [uuid])
    ownerUuid  String @db.Uuid()
    toUserUuid String @db.Uuid()
}

model Pet {
    id           Int        @id @default(autoincrement())
    uuid         String     @unique @default(uuid()) @db.Uuid()
    name         String
    type         String
    species      String
    age          Int
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @default(now()) @updatedAt
    PetOwner     User       @relation(fields: [petOwnerUuid], references: [uuid])
    petOwnerUuid String     @db.Uuid()
    Proposal     Proposal[]
}

model ChatRoom {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid()) @db.Uuid()
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    User    User[]
    Message Message[]
}

model Message {
    id         Int      @id @default(autoincrement())
    content    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt
    userUuid   Int
    user       User     @relation(fields: [userUuid], references: [id])
    RoomChat   ChatRoom @relation(fields: [roomChatId], references: [id])
    roomChatId Int
}

model Contacts {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid()) @db.Uuid()
    email     String
    phone     String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // No direct relationships provided in the original schema, adjust as needed
    Preference Preference[]
}

model DataAnalytics {
    id                  Int          @id @default(autoincrement())
    uuid                String       @unique @default(uuid()) @db.Uuid()
    budget              Float
    rating              Float        @default(0)
    willingnessToTravel Boolean
    createdAt           DateTime     @default(now())
    updatedAt           DateTime     @default(now()) @updatedAt
    // No direct relationships provided in the original schema, adjust as needed
    Preference          Preference[]
    location            Location     @relation(fields: [locationUuid], references: [uuid])
    locationUuid        String       @db.Uuid()
}

model Proposal {
    id                 Int      @id @default(autoincrement())
    uuid               String   @unique @default(uuid()) @db.Uuid()
    petUuid            String   @db.Uuid()
    proposalOwnerUuid  String   @db.Uuid()
    offeringPrice      Float
    status             String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @default(now()) @updatedAt
    // Define relationships
    pet                Pet      @relation(fields: [petUuid], references: [uuid])
    toOfferingUser     User?    @relation(name: "toOfferingUser", fields: [toOfferingUserUuid], references: [uuid])
    toOfferingUserUuid String?  @db.Uuid()
    proposalOwner      User     @relation(name: "proposalOwner", fields: [proposalOwnerUuid], references: [uuid])
}

model Preference {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid()) @db.Uuid()
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Define relationships
    contacts      Contacts      @relation(fields: [contactUuid], references: [uuid])
    contactUuid   String        @db.Uuid()
    dataAnalytics DataAnalytics @relation(fields: [dataUuid], references: [uuid])
    dataUuid      String        @db.Uuid()
    User          User[]
}

model Location {
    id            Int             @id @default(autoincrement())
    uuid          String          @unique @default(uuid()) @db.Uuid()
    type          String
    properties    Json
    geometry      Geometry        @relation(fields: [geometryUuid], references: [uuid])
    geometryUuid  String          @db.Uuid()
    DataAnalytics DataAnalytics[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @default(now()) @updatedAt
}

model Geometry {
    id          Int        @id @default(autoincrement())
    uuid        String     @unique @default(uuid()) @db.Uuid()
    coordinates Float[]
    type        String
    Location    Location[]
}

// Add other models and relationships as needed

enum Role {
    USER_SENDER
    USER_ADOPTER
    ADMIN
}
